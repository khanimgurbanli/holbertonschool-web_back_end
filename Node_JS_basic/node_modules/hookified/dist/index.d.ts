type EventListener = (...arguments_: any[]) => void;
declare class Eventified {
    _eventListeners: Map<string, EventListener[]>;
    _maxListeners: number;
    constructor();
    maxListeners(): number;
    addListener(event: string, listener: EventListener): void;
    on(event: string, listener: EventListener): void;
    removeListener(event: string, listener: EventListener): void;
    off(event: string, listener: EventListener): void;
    emit(event: string, ...arguments_: any[]): void;
    listeners(event: string): EventListener[];
    removeAllListeners(event?: string): void;
    setMaxListeners(n: number): void;
}

type Hook = (...arguments_: any[]) => Promise<void> | void;
declare class Hookified extends Eventified {
    _hooks: Map<string, Hook[]>;
    constructor();
    onHook(event: string, handler: Hook): void;
    removeHook(event: string, handler: Hook): void;
    hook<T>(event: string, ...arguments_: T[]): Promise<void>;
    get hooks(): Map<string, Hook[]>;
    getHooks(event: string): Hook[] | undefined;
    clearHooks(): void;
}

export { type EventListener, Eventified, type Hook, Hookified };
